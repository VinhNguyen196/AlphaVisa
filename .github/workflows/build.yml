name: Build

on:
  pull_request:
    branches: [ main, staging, dev ]
    paths-ignore:
      - '.scripts/**'
      - .gitignore
      - CODE_OF_CONDUCT.md
      - LICENSE
      - README.md

  workflow_call:
    inputs:
      environmentName:
        required: true
        type: string
      build-artifacts:
        type: boolean
        required: true
        default: false
        
    outputs:
      webTag:
        description: 'Web Tag output'
        value: ${{ jobs.build.outputs.webTag }}  # This references the job output
        
        
jobs:
  build:
    # if: "!contains(github.event.head_commit.message, 'chore')" Exclude commits with 'chore' in the message
    runs-on: ubuntu-latest
    outputs:
      webTag: ${{ steps.set_tag.outputs.webTag }}  # Set output for webTag at the job level
    steps: 
    - name: Set webTag Variable
      if: ${{ inputs.build-artifacts == true }}
      id: set_tag
      run: |
          ENV_NAME=${{ inputs.environmentName }}
          echo "webTag=${ENV_NAME}-${{ github.sha }}" >> $GITHUB_ENV
          echo "webTag=${ENV_NAME}-${{ github.sha }}" >> $GITHUB_OUTPUT
    
    - uses: actions/checkout@v4
      name: Checkout code
      
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-


    - name: Install .NET
      uses: actions/setup-dotnet@v4

    - name: Restore solution
      run: dotnet restore "AlphaVisa.sln"

    - name: Build solution
      run: dotnet build "AlphaVisa.sln" --no-restore --configuration Release
      
    # - name: Test solution
      # run: dotnet test "AlphaVisa.sln" --no-build --configuration Release --filter "FullyQualifiedName!~AcceptanceTests"

    # - name: Publish website
      # if: ${{ inputs.build-artifacts == true }}
      # run: |
        # dotnet publish --configuration Release --runtime win-x86 --self-contained --output ./publish
        # cd publish
        # zip -r ./publish.zip .
      # working-directory: ./src/Web/

    # - name: Upload website artifact (website)
      # if: ${{ inputs.build-artifacts == true }}
      # uses: actions/upload-artifact@v4
      # with:
        # name: website
        # path: ./src/Web/publish/publish.zip
        # if-no-files-found: error
    
    # Build Docker Image
    - name: Build Docker image
      if: ${{ inputs.build-artifacts == true }}
      run: |
        docker build -t ${{ vars.DOCKER_ALPHAVISA_REPO }}:${{ steps.set_tag.outputs.webTag }} -f src/Web/Dockerfile .
    
    # Tag the image as 'latest' in addition to the dynamically generated tag
    - name: Tag Docker image as latest
      if: ${{ inputs.build-artifacts == true }}
      run: |
        docker tag ${{ vars.DOCKER_ALPHAVISA_REPO }}:${{ steps.set_tag.outputs.webTag }} ${{ vars.DOCKER_ALPHAVISA_REPO }}:${{ inputs.environmentName }}-latest

    # Push Docker Image to Registry
    - name: Push Docker image to registry
      if: ${{ inputs.build-artifacts == true }}
      run: |
        docker login -u ${{ vars.DOCKER_USERNAME }} -p ${{ vars.DOCKER_TOKEN }}
        docker push ${{ vars.DOCKER_ALPHAVISA_REPO }}:${{ steps.set_tag.outputs.webTag }}
        docker push ${{ vars.DOCKER_ALPHAVISA_REPO }}:${{ inputs.environmentName }}-latest
    
    - name: Create EF Core migrations bundle - Install tool-manifest
      if: ${{ inputs.build-artifacts == true }}
      run: |
        dotnet new tool-manifest
      env:
        SkipNSwag: True

    - name: Create EF Core migrations bundle - Install dotnet-ef
      if: ${{ inputs.build-artifacts == true }}
      run: |
        dotnet tool install dotnet-ef # Install the latest version automatically
      env:
        SkipNSwag: True


    - name: Create EF Core migrations bundle - bundle migrations
      if: ${{ inputs.build-artifacts == true }}
      run: |
        dotnet ef migrations bundle --configuration Release -p ./src/Infrastructure/ -s ./src/Web/ -o efbundle.exe
      env:
        SkipNSwag: True

    # Combine appsettings.json and efbundle.exe and zip them together
    - name: Create and zip both efbundle.exe and appsettings.json
      if: ${{ inputs.build-artifacts == true }}
      run: |
        cp src/Web/appsettings.json ./  # Copy appsettings.json to the root where efbundle.exe is located
        zip -r ./efbundle.zip efbundle.exe appsettings.json
      env:
        SkipNSwag: True

    - name: Upload EF Core migrations bundle artifact (efbundle)
      if: ${{ inputs.build-artifacts == true }}
      uses: actions/upload-artifact@v4
      with:
        name: efbundle
        path: ./efbundle.zip
        if-no-files-found: error
