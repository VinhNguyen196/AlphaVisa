name: Deploy Self Hosted

on:
  workflow_call:
    inputs:
      environmentName:
        required: true
        type: string
      webTag:
        required: true
        type: string  # Pass the webTag as input to the workflow

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner: [ ovh ] # list of runner's labels
    continue-on-error: true  # Allows each matrix job to continue even if one fails
    steps:
    - name: Check disk space
      run: |
        EXCLUDE_LIST="/snap|/boot/efi|/run|/dev"
        df -h | grep -E -v "${EXCLUDE_LIST}" | awk '$5+0 > 90 {print "Disk space is above 90% on "$6" with "$5" used."; exit 1}'
        echo "Disk space is within acceptable limits."
      shell: bash
    
    - name: Ensure Docker is running
      run: |
        if ! docker info > /dev/null 2>&1; then
            echo "Docker is not running on this host."
            exit 1
        fi

    - name: Test network connectivity to Docker Hub
      run: |
        if ! curl -fsSL https://hub.docker.com > /dev/null; then
          echo "Cannot reach Docker Hub. Check network connectivity."
          exit 1
        fi

    # - name: Validate Nginx configuration
      # run: |
        # sudo nginx -t

  deploy:
    runs-on: ${{ matrix.runner }}
    needs: validate
    strategy:
      matrix:
        runner: [ ovh ] # list of runner's labels
    continue-on-error: true  # Allows each matrix job to continue even if one fails
    environment: ${{ inputs.environmentName }}

    steps:

    - uses: actions/checkout@v4
      name: Checkout code

    - name: Download EF Core migrations bundle artifact
      uses: actions/download-artifact@v4
      with:
        name: efbundle
    
    - name: Create .env file with environment variables
      run: |
        ENV_PATH="${{ vars.APP_PATH }}"
        ENV_FILE="${{ vars.ENV_FILE }}"
        
        # Create the .env file in the specified ENV_PATH
        mkdir -p $ENV_PATH
        ENV_CONFIG=$ENV_PATH/$ENV_FILE
        rm -rf $ENV_CONFIG
        touch $ENV_CONFIG
        
        echo "ENV_NAME=${{ inputs.environmentName }}" >> $ENV_CONFIG
        echo "APP_PATH=${{ vars.APP_PATH }}" >> $ENV_CONFIG
        echo "APP_BACKUP_PATH=${{ vars.APP_BACKUP_PATH }}" >> $ENV_CONFIG
        echo "SQL_DB_CONTAINER=${{ vars.SQL_DB_CONTAINER }}" >> $ENV_CONFIG
        echo "SQL_DB_NAME=${{ vars.SQL_DB_NAME }}" >> $ENV_CONFIG
        echo "SQL_DB_PASSWORD=${{ vars.SQL_DB_PASSWORD }}" >> $ENV_CONFIG
        echo "API_CONTAINER=${{ vars.API_CONTAINER }}" >> $ENV_CONFIG
        echo "WEB_CONTAINER=${{ vars.WEB_CONTAINER }}" >> $ENV_CONFIG
        echo "DOCKER_REGISTRY=${{ vars.DOCKER_ALPHAVISA_REPO }}" >> $ENV_CONFIG
        echo "WEB_TAG=${{ inputs.webTag }}" >> $ENV_CONFIG
        echo "API_PORT=${{ vars.API_PORT }}" >> $ENV_CONFIG
        echo "WEB_PORT=${{ vars.WEB_PORT }}" >> $ENV_CONFIG
        echo "API_DOMAIN=${{ vars.API_DOMAIN }}" >> $ENV_CONFIG
        echo "WEB_DOMAIN=${{ vars.WEB_DOMAIN }}" >> $ENV_CONFIG
        echo "SERVER_API_URL=${{ vars.SERVER_API_URL }}" >> $ENV_CONFIG
        echo "APP_MAIL=${{ vars.APP_MAIL }}" >> $ENV_CONFIG
        echo "SQL_DB_SERVER=${{ vars.SQL_DB_SERVER }}" >> $ENV_CONFIG
        echo "SQL_DATA_PATH=${{ vars.SQL_DATA_PATH }}" >> $ENV_CONFIG
        echo "FILE_STORE_PATH=${{ vars.FILE_STORE_PATH }}" >> $ENV_CONFIG
        echo "RUNNER_REPO=${{ vars.RUNNER_REPO }}" >> $ENV_CONFIG
        echo "RUNNER_TOKEN=${{ vars.RUNNER_TOKEN }}" >> $ENV_CONFIG
    
    - name: Pull Docker Image
      run: |
        echo "${{ vars.DOCKER_TOKEN }}" | docker login -u "${{ vars.DOCKER_USERNAME }}" --password-stdin
        docker pull ${{ vars.DOCKER_ALPHAVISA_REPO }}:${{ inputs.webTag }}
        
    # Retain the latest two images and remove the rest locally
    - name: Remove old Docker images locally, retain two latest and running
      continue-on-error: true
      run: |
          current_tag="${{ inputs.webTag }}"
          
          # Get the list of running image tags
          running_tag=$(docker ps --format '{{.Image}}' | grep "${{ vars.DOCKER_ALPHAVISA_REPO }}:${{ inputs.environmentName }}" | awk -F ':' '{print $2}' | head -n 1)
          if [ -z "$running_tag" ]; then
            echo "No running containers found. Skipping running tag exclusion."
          else
            echo "Currently running image tag: $running_tag"
          fi
          # Get all images filtered by environmentName, sorted by creation date, exclude the one being deployed and currently running
          all_images=$(docker images --filter=reference='${{ vars.DOCKER_ALPHAVISA_REPO }}:${{ inputs.environmentName }}*' --format "{{.Repository}}:{{.Tag}} {{.CreatedAt}} {{.ID}}" | sort -k 2 -r)
          # Exclude the currently deployed and running images
          old_images=$(echo "$all_images" | grep -v "$current_tag" | grep -v "$running_tag" | awk '{print $NF}')  # $NF gets the last field (image ID)
          if [ -z "$old_images" ]; then
            echo "No old images to clean up."
          else
            # Retain the latest two images (currently running and deployed images)
            echo "$old_images" | while read image_id; do
              echo "Removing old image locally: $image_id"
              docker rmi -f $image_id || echo "Failed to remove image $image_id, it might be in use."
            done  
          fi
          
    # Install jq (JSON parser tool)
    # - name: Install jq
      # run: |
          # sudo apt-get update
          # sudo apt-get install -y jq

    # Remove old Docker images from Docker Hub, retain two latest and running
    - name: Remove old Docker images from Docker Hub, retain two latest and running
      continue-on-error: true    
      run: |
          repo="${{ vars.DOCKER_ALPHAVISA_REPO }}"
          current_tag="${{ inputs.webTag }}"
          
          # Get the tag of the currently running container
          running_tag=$(docker ps --format '{{.Image}}' | grep "${{ vars.DOCKER_ALPHAVISA_REPO }}:${{ inputs.environmentName }}" | awk -F ':' '{print $2}' | head -n 1)
          
          if [ -z "$running_tag" ]; then
            echo "No running container found. Skipping running tag exclusion."
          else
            echo "Currently running image tag: $running_tag"
          fi
          echo "Current deployed image tag: $current_tag"
          # Get all tags filtered by environmentName from Docker Hub, sorted by pushed date
          old_tags=$(curl -s -u "${{ vars.DOCKER_USERNAME }}:${{ vars.DOCKER_TOKEN }}" \
          "https://hub.docker.com/v2/repositories/${repo}/tags/?page_size=100" \
          | jq -r '.results[] | "\(.name) \(.tag_last_pushed)"' | sort -k 2 -r | awk '{print $1}' | grep "${{ inputs.environmentName }}" | grep -v $current_tag)
          # If running_tag is not empty, exclude it
          if [ -n "$running_tag" ]; then
            old_tags=$(echo "$old_tags" | grep -v "$running_tag")
          fi
          # Retain the latest two tags (after excluding the currently running and deployed images)
          echo "$old_tags" | tail -n +2 | while read tag; do
              echo "Attempting to delete old image with tag: $tag from Docker Hub"
              response=$(curl -s -o /dev/null -w "%{http_code}" -X DELETE -H "Authorization: Bearer ${{ vars.DOCKER_TOKEN }}" \
                  "https://hub.docker.com/v2/repositories/${repo}/tags/$tag")
              if [ "$response" -eq 204 ]; then
                  echo "Deleted image with tag: $tag from Docker Hub"
              else
                  echo "Failed to delete image with tag: $tag from Docker Hub. HTTP status: $response"
              fi
          done
    
    # Load previous SQL Server password and handle the new password
    - name: Retrieve and update SQL Server password
      continue-on-error: true  # Skip this step if it fails
      run: |
          OLD_SQL_DB_PASSWORD="${{ vars.OLD_SQL_DB_PASSWORD }}"
          NEW_SQL_DB_PASSWORD="${{ vars.SQL_DB_PASSWORD }}"
          
          echo "Testing connection with OLD_SQL_DB_PASSWORD"
          
          # Test SQL login with old password
          if docker exec ${{ vars.SQL_DB_CONTAINER }} /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "$OLD_SQL_DB_PASSWORD" -No -Q "SELECT 1"; then
              echo "Old password is valid, updating password to new password..."
              
              # Change the password to the new one
              docker exec ${{ vars.SQL_DB_CONTAINER }} /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "$OLD_SQL_DB_PASSWORD" -No -Q "ALTER LOGIN sa WITH PASSWORD = '$NEW_SQL_DB_PASSWORD';"
              
              # Verify if the new password works
              if docker exec ${{ vars.SQL_DB_CONTAINER }} /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P "$NEW_SQL_DB_PASSWORD" -No -Q "SELECT 1"; then
                  echo "Password successfully updated!"
              else
                  echo "Failed to verify the new password after update."
                  exit 1
              fi
          else
              echo "Failed to authenticate using OLD_SQL_DB_PASSWORD. Aborting the password update."
              exit 0
          fi
      shell: bash
        
    - name: Set up environment variables for Docker Compose
      run: |
        echo "SQL_DB_CONTAINER=${{ vars.SQL_DB_CONTAINER }}" >> .env
        echo "SQL_DB_NAME=${{ vars.SQL_DB_NAME }}" >> .env
        echo "SQL_DB_PASSWORD=${{ vars.SQL_DB_PASSWORD }}" >> .env
        echo "DOCKER_REGISTRY=${{ vars.DOCKER_ALPHAVISA_REPO }}" >> .env
        echo "WEB_TAG=${{ inputs.webTag }}" >> .env
        echo "API_PORT=${{ vars.API_PORT }}" >> .env
        echo "API_CONTAINER=${{ vars.API_CONTAINER }}" >> .env
        echo "WEB_CONTAINER=${{ vars.WEB_CONTAINER }}" >> .env
        echo "SQL_DATA_PATH=${{ vars.SQL_DATA_PATH }}" >> .env
        echo "FILE_STORE_PATH=${{ vars.FILE_STORE_PATH }}" >> .env

    - name: Deploy Application
      run: |
        echo "Starting Docker Compose..."
        docker compose down
        docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d

    - name: Wait for Services to be Ready
      run: |
        echo "Waiting for SQL Server to be available..."
        timeout 120s bash -c 'until docker exec ${{ vars.SQL_DB_CONTAINER }} /opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P ${{ vars.SQL_DB_PASSWORD }} -No -Q "SELECT 1" > /dev/null 2>&1; do
            echo "SQL Server is not available yet, waiting..."
            sleep 5
        done'
        if [ $? -ne 0 ]; then
            echo "Timeout reached, SQL Server did not become ready in time."
            exit 1
        fi
        echo "SQL Server is ready."
        
    # - name: Install unzip, zip tool #
      # run: |
          # sudo apt-get update
          # sudo apt-get install -y unzip zip
          
    - name: Apply EF Core migrations
      run: |
        unzip -o efbundle.zip
        ./efbundle.exe --connection "Server=${{ vars.SQL_DB_SERVER }};Database=${{ vars.SQL_DB_NAME }};User ID=sa;Password=${{ vars.SQL_DB_PASSWORD }};Encrypt=true;TrustServerCertificate=true;"
        mkdir -p ${{ vars.APP_PATH }}
        cp efbundle.zip ${{ vars.APP_PATH }}/
      continue-on-error: true  # Skip this step if it fails
    
    - name: Wait for API to be Ready
      run: |
        echo "Waiting for Application to be available..."
        timeout 120s bash -c 'until curl -sSf http://localhost:8080 > /dev/null 2>&1; do
            echo "Application is not available yet, waiting..."
            sleep 5
        done'
        if [ $? -ne 0 ]; then
            echo "Timeout reached, Application did not become ready in time."
            exit 1
        fi
        echo "Application is ready."
        
    - name: Reload Nginx to apply any new configurations
      run: |
        sudo systemctl reload nginx

    # - name: Restart Application
      # run: |
        # sudo systemctl restart my-web-api.service

    - name: Verify Deployment
      run: |
        curl -f http://localhost:8080 || exit 1  # Adjust this to the appropriate health check URL for your Web API
